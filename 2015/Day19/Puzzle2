#!/usr/bin/python3

#Thanks to u/askalski on Reddit for the excellent explanation

#Notes for this Grammar
#Rn, Y, Ar - Terminal Elements

#Map
#Rn -> (
#Y -> ,
#Ar -> )

#Each producion results in one of these
#X => XX | X(X) | X(X,X) | X(X,X,X)

#If we have all X, it takes count(element) - 1 steps

#If we have X(X) it takes one production to get there, so count(element) - count(parenthesis) - 1

#If we have X(X,X) or X(X,X,X) they both take one production
#The commas, signify that itself and the next element dont count towards the total steps
#simplified count(elements) - count(parenthesis) - 2*count(commas) - 1

#Now in Python!
import re

file = open('input')
inp = file.readlines()
file.close()

NonTerminals = set()
inpstring = ''

#Collect NonTerminals and input from file
for p in inp:
    if '=>' in p:
        NonTerminals.add(p.split(' ')[0])
    else:
        inpstring = p.strip()

elementfinder = re.compile('[A-Z]')

#Find total element count
totalelem = len(re.findall(elementfinder, inpstring))
#Find parenthesis
totalparen = len(re.findall('(Ar)|(Rn)', inpstring))
#Find commas
totalcomma = len(re.findall('Y', inpstring))

print(totalelem - totalparen - 2*totalcomma - 1)
