#!/usr/bin/python3

#Ensure the correct path is passed to Graph
import os
#Import an EdgeWeightedSymbolDiGraph
from Graphs import ESDGraph as esdg

#Setup Breadth first search
def BFS(v):
    #Collect path lengths
    pathlen = []
    #Create visited Dictionary
    visit = {}
    for x in g.adj:
        visit[x] = False
    #Call Recursive Method
    rBFS(v,visit, f"{v}", 0, pathlen)
    #Return longest distance
    return max(pathlen)

#Recursive Breadth First Search Method
def rBFS(v, visit, path, pathVal, pathlen):
    #Copy visited array (prevent two paths sharing an array)
    visited = visit.copy()
    #Visit Vertice
    visited[v] = True
    #Recurse on unvisited vertices
    for p in g.adj[v]:
        if not visited[p]:
            rBFS(p, visited, path + f" -> {p}", pathVal + g.adj[v][p], pathlen)
    #Append pathlength when finished
    if False not in visited.values():
        pathlen.append(pathVal)


#Create the graph
g = esdg()
g.GraphFromFile(os.path.join(os.getcwd(), "input"))

#Store path lengths from BFS
lenlist = []
for p in g.adj:
    lenlist.append(BFS(p))
#Show largest path length
print(max(lenlist))
